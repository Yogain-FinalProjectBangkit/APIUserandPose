from .typed import column_n_t, column_t, columns_n_t, conn_t, drows_t, mv_copy_t, nrows_t, rows_n_t, rows_t, schemas_n_t, stmt_t
from sqlalchemy import MetaData
from sqlalchemy.engine import Connection, Dialect, Engine, Row
from typing import List, Optional, Union

def sqlx_encrypt_pass(context: str, salt: bytes = ...) -> str: ...
def sqlx_comp_pass(context: str, crypt: str, salt: bytes = ...) -> bool: ...
def sqlx_gen_uuid(context: str = ..., slim: bool = ...) -> str: ...
def sqlx_run_query_as_connection(connection: Connection, context: stmt_t, commit: bool = ..., size: int = ...) -> rows_n_t: ...
def sqlx_run_query(engine: conn_t, context: stmt_t, commit: bool = ..., size: int = ...) -> rows_n_t: ...
def sqlx_get_column_name(column: column_t) -> str: ...
def sqlx_row_to_dict(table: str, row: Row, schemas: schemas_n_t) -> dict: ...
def sqlx_fetch_as_dict(engine: conn_t, table: str, stmt: stmt_t, schemas: schemas_n_t = ..., size: int = ...) -> drows_t: ...
def sqlx_create_column_opt(data: dict) -> column_n_t: ...
def sqlx_model_view_with_connection(connection: Connection) -> mv_copy_t: ...
def sqlx_model_view(bind: conn_t) -> mv_copy_t: ...
def sqlx_normalize_rows(data: rows_t) -> nrows_t: ...
def sqlx_get_driver_name_from_dialect(dialect: Dialect) -> Optional[str]: ...
def sqlx_get_driver_name_from_engine(engine: Engine) -> Optional[str]: ...
def sqlx_get_driver_name_from_connection(connection: Connection) -> Optional[str]: ...
def sqlx_get_driver_name(bind: Union[Dialect, conn_t]) -> Optional[str]: ...
def sqlx_dump_with_engine(engine: Engine, metadata: Optional[MetaData] = ...) -> Optional[str]: ...
def sqlx_dump(bind: Union[Dialect, conn_t] = ..., metadata: Optional[MetaData] = ...) -> Optional[str]: ...
def sqlx_get_columns_names(columns: columns_n_t) -> List[str]: ...
def sqlx_create_metadata() -> MetaData: ...
