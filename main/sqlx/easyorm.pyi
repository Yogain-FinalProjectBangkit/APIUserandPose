import sqlalchemy as sqlx
from .typed import column_n_t, column_t, columns_n_t, columns_t, conn_t, drows_t, group_by_n_t, order_by_n_t, schemas_n_t, where_clauses_n_t
from sqlalchemy.engine import Engine as Engine
from sqlalchemy.sql.base import ImmutableColumnCollection
from sqlalchemy.sql.schema import ColumnDefault
from sqlalchemy.sql.selectable import Join
from typing import Any, List, Optional, Tuple

class EasyORM:
    class Exclude:
        value: Any
        args: Tuple[Any, ...]
        kwargs: dict
        def __init__(self, *args, value: Any = ..., **kwargs) -> None: ...
    engine: conn_t
    primary: column_n_t
    table: sqlx.Table
    columns: ImmutableColumnCollection
    c: ImmutableColumnCollection
    def __init__(self, engine: conn_t, table: sqlx.Table, *args, **kwargs) -> None: ...
    def exclude(self, *args, value: Any = ..., **kwargs): ...
    def get_column_names(self, columns: columns_n_t) -> List[str]: ...
    def try_parsing_default_column(self, column: column_t) -> Optional[ColumnDefault]: ...
    def verify_args_with_columns(self, *args, columns: columns_t, default: bool = ..., nullable: bool = ...) -> dict: ...
    def verify_kwargs_with_columns(self, columns: columns_t, default: bool = ..., nullable: bool = ..., **kwargs) -> dict: ...
    def get_data_collections(self, *args, default: bool = ..., nullable: bool = ..., **kwargs) -> dict: ...
    def get_column_from_join(self, column: str, join: Optional[Join] = ...) -> column_n_t: ...
    def make_column_as_same_table(self, column: column_t, join: Optional[Join] = ...) -> column_n_t: ...
    def conv_schemas_to_columns(self, schemas: schemas_n_t, join: Optional[Join] = ...) -> List[sqlx.Column]: ...
    def get(self, *args, schemas: schemas_n_t = ..., group_by: group_by_n_t = ..., order_by: order_by_n_t = ..., join: Optional[Join] = ..., whereclauses: where_clauses_n_t = ..., skipcheck: bool = ..., nullable: bool = ..., offset: int = ..., size: int = ..., **kwargs) -> drows_t: ...
    def getall(self, *args, **kwargs) -> drows_t: ...
    def check_values_as_possible(self, target: List[sqlx.Column], data: dict) -> bool: ...
    def put(self, *args, default: bool = ..., nullable: bool = ..., verify: bool = ..., **kwargs) -> bool: ...
    def post(self, *args, **kwargs) -> bool: ...
    def update(self, *args, target: schemas_n_t = ..., whereclauses: where_clauses_n_t = ..., skipcheck: bool = ..., nullable: bool = ..., verify: bool = ..., force: bool = ..., **kwargs) -> bool: ...
    def delete(self, *args, target: schemas_n_t = ..., whereclauses: where_clauses_n_t = ..., skipcheck: bool = ..., nullable: bool = ..., verify: bool = ..., force: bool = ..., **kwargs) -> bool: ...
    def drop(self) -> bool: ...

def sqlx_easy_orm(engine: conn_t, table: sqlx.Table) -> EasyORM: ...
